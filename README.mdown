# Feach 0.1

A plugin/pattern for feature development in jQuery, inspired by my day-to-day JS workflow. 

Terminology: 'features' are class-like elements - they define child objects ('instances') which are instantiated and tied ('made') to DOM elements.

Goals:

- Design for the most common use case
- Use familiar, jQuery-style chaining
- Provide multiple access points for features, instances, DOM elements
- Inherit from a base class for common actions
- Smooth over some of JS's OO quirks
- Be opinionated

# Basic Example

<pre>// define a feature
$.feach('Gallery').define({
	init : function(){ 
		... do stuff ...
	}
}).make('.gallery');
</pre>


# Documentation

- <a href="#feach">$.feach()</a>
	- <a href="#feach_define">.define()</a>
	- <a href="#feach_make">.make()</a>
	- <a href="#feach_aug">.aug()</a>
	- <a href="#feach_extend">.extend()</a>
	- <a href="#feach_get">.get()</a>
	- <a href="#feach_each">.each()</a>
	- <a href="#feach_destroy">.destroy()</a>
	- <a href="#feach_instances">.instances</a>
- <a href="#special">Special definition properties</a>
	- <a href="#special_init">.init()</a>
	- <a href="#special_name">.name</a>
	- <a href="#special_selector">.selector</a>
	- <a href="#special_dynamic">.dynamic</a>
	- <a href="#special_defaults">.defaults</a>
	- <a href="#special_teardown">.tearDown()</a>
- <a href="#instance_props">Instance properties</a>
	- <a href="#instance_elem">.$elem</a>
	- <a href="#instance_index">.index</a>
	- <a href="#instance_super">._super()</a>
	- <a href="#instance_options">.options</a>
	- <a href="#instance_feature">.feature</a>
- <a href="#base">Base methods</a>
	- <a href="#base_cachedom">._cacheDom()</a>
	- <a href="#base_destroy">._destroy()</a>
	- <a href="#base_instindex">._instIndex()</a>

<a name="feach"></a>
## $.feach()

Create or retrieve a feature. If chained from a DOM element, returns an instance of the feature.

<pre>
$.feach('Gallery').define({foo : 'bar'}).make('.gallery');
$.feach('Gallery');                // Gallery feature
$('.gallery').eq(0).feach();       // Gallery instance
$('.gallery').eq(0).feach().foo;   // 'bar'
</pre>

<a name="feach_define"></a>
### .define({obj})

Define a feature, using the properties of <code>obj</code>

<pre>
$.feach('Gallery').define({ foo : 'bar' });  // Gallery feature
</pre>

<a name="feach_make"></a>
### .make('selector', $context, {config})

Create one instance of a feature for each DOM element in a set. All parameters are optional. Setting a {config} will add properties to the inst.options object.

<pre>
$.feach('Gallery').make('.gallery', $('#content'), {foo : 'bar'})
$('.gallery').eq(0).feach().options.foo;     // 'bar'
</pre>

<a name="feach_aug"></a>
### .aug({obj})

Add or overwrite properties of an existing feature. 

<pre>
$.feach('Gallery').define({foo : 'bar'});
$.feach('Gallery').aug({foo : 'not bar', paused : true});
$.feach('Gallery').def.prototype.foo               // 'not bar'
$.feach('Gallery').def.prototype.paused            // true
</pre>

<a name="feach_extend"></a>
### .extend('Name')

Inherits properties from an existing ('parent') feature. An matching properties will be ignored. Matching _methods_ will be saved in a _super() method.

<pre>
$.feach('Gallery').define({foo : 'bar', add_one : function(){ return 1; }});
$.feach('ThumbGallery').define(({ add_one : function(){ return 1 + this._super() }}).extend('Gallery');
$.feach('ThumbGallery').make('.gallery');
$('.gallery').eq(0).feach().foo          // 'bar'
$('.gallery').eq(0).feach().add_one()    // 2
</pre>

<a name="feach_get"></a>
### .get()

Returns a jQuery object of DOM elements a feature has instantiated from.

<pre>
$.feach('Gallery').make('.gallery');
$.feach('Gallery').get(); // gallery elements
</pre>

<a name="feach_each"></a>
### .each(method_or_method_name, arg1, arg2, arg3...)

Apply a method on all instances of a feature.

<pre>
$.feach('Gallery').each('pause', 400);
$.feach('Gallery').each(function(){
	this.pause(400);
});
</pre>

<a name="feach_destroy"></a>
### .destroy(destroy_instances, destroy_elems)

Deletes a feature. Optionally deletes all instances of the feature and removes all elements the feature was made() on.

<a name="feach_instances"></a>
### .instances

Array of all instances of a feature.

<pre>
$.feach('Gallery').instances[0]; // [array]
$.feach('Gallery').instances[0].pause();
</pre>

<hr />

<a name="special"></a>
## Special Properties

All feature definition properties are optional. Setting the following properties in your definition will produce specific results: 

<a name="special_init"></a>
### .init()

Init, when set, will be called when .make() is used.

<a name="special_name"></a>
### .name

If you set a feature's name in the definition, you don't need to name it in $.feach(). Example:

<pre>
$.feach().define({name : 'Gallery'});
$.feach('Gallery'); // returns existing feature named 'Gallery'
</pre>

<a name="special_selector"></a>
### .selector

If you set a feature's selector in the definition, you don't need to set it when calling make(). Example:

<pre>
$.feach('Gallery').define({selector : '.gallery'}).make();
</pre>

<a name="special_dynamic"></a>
### .dynamic

If your definition has a "dynamic" object, any property in it will be added after instantiation. This is useful for creating non-prototype properties that can be augmented per-instance.

<a name="special_defaults"></a>
### .defaults

Every feature ends up with an "options" object, which is merged from .defaults and the {config} you pass in make().

<a name="special_teardown"></a>
### .tearDown()

If you provide a tearDown method, it will be called when an instance or a class is destroy()ed. Useful for unbinding any events you might have in the feature.


<hr />

<a name="instance"></a>
## Instance properties

Each instance will always have the following properties:

<a name="instance_elem"></a>
### .$elem

The original element a feature was instantiated from.

<a name="instance_index"></a>
### .index

The index of $elem in its original selection. Be careful: this is dynamic or not necessarily unique. 

<a name="instance_super"></a>
### ._super()

Call the parent feature's version of a method. This assumes that the current feature has been $.extended

<a name="instance_options"></a>
### .options

A merged object of .defaults (set in in define()), .config (set in the make()), and data-attributes from the element itself.

<a name="instance_feature"></a>
### .feature

Reference to the original feature.

<hr />

<a name="base"></a>
## Base class

Every feature extends a Base object, which has some useful defaults. Methods that exist in the Base object will be overwritten _without_ a _super method, so be careful.

At any time (even after instances are created), you can modify these base properties by altering $.feach.Base.prototype.

<a name="base_cachedom"></a>
### ._cacheDom({obj}, prefix)

Stores each prop in an object of selectors as $propname : $('selector', this.$elem). Example:

<pre>
this._cacheDom({
	'next' : '.gallery-next',
	'thumb' : '.gallery-thumbs img'
});
this.$next;  // [A element]
this.$thumb; // [IMG IMG IMG elements]
</pre>

Optionally takes a prefix:

<pre>
this._cacheDom({
	'next' : 'next',
	'thumb' : 'thumbs img'
}, '.gallery-');
</pre>

<a name="base_destroy"></a>
### ._destroy(remove_elem)

Deletes an instance, calling .tearDown() if available. Optionally, removes the DOM element. 

<a name="base_instindex"></a>
### ._instIndex()

Returns the index of an instance in the feature.instances array. Used primarily for destroying instances.
